"""
Trait definitions in the 'example' namespace.

Example namespace
"""
import warnings

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio.trait import TraitsData


class DeprecatedTrait_v1:
    """
    An example.
    Usage: entity, locale, relationship
    """

    kId = "openassetio-example:example.Deprecated"

    __deprecated__ = True  # (Eventually use PEP 702)

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)


# Alias for first version.
class DeprecatedTrait(DeprecatedTrait_v1):
    def __init__(self, traitsData):
        super().__init__(traitsData)
        warnings.warn(
            "Use of unversioned trait view classes is deprecated",
            category=DeprecationWarning,
            stacklevel=2,
        )

class UpdatedTrait_v2:
    """
    An example.
    Usage: entity, locale, relationship
    """

    kId = "openassetio-example:example.Updated.v2"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    def setPropertyThatWasAdded(self, propertyThatWasAdded: float):
        """
        Sets the propertyThatWasAdded property.

        A new property added in the latest version.
        """
        if not isinstance(propertyThatWasAdded, float):
            raise TypeError("propertyThatWasAdded must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "propertyThatWasAdded", propertyThatWasAdded)

    def getPropertyThatWasAdded(self, defaultValue: float = None) -> Union[float, None]:
        """
        Gets the value of the propertyThatWasAdded property or the supplied default.

        A new property added in the latest version.
        """
        value = self.__data.getTraitProperty(self.kId, "propertyThatWasAdded")
        if value is None:
            return defaultValue

        if not isinstance(value, float):
            if defaultValue is None:
                raise TypeError(
                    f"Invalid stored value type: '{type(value).__name__}' should be 'float'."
                )
            return defaultValue
        return value

    def setPropertyThatWasRenamed(self, propertyThatWasRenamed: bool):
        """
        Sets the propertyThatWasRenamed property.

        A property that has been renamed.
        """
        if not isinstance(propertyThatWasRenamed, bool):
            raise TypeError("propertyThatWasRenamed must be a 'bool'.")
        self.__data.setTraitProperty(self.kId, "propertyThatWasRenamed", propertyThatWasRenamed)

    def getPropertyThatWasRenamed(self, defaultValue: bool = None) -> Union[bool, None]:
        """
        Gets the value of the propertyThatWasRenamed property or the supplied default.

        A property that has been renamed.
        """
        value = self.__data.getTraitProperty(self.kId, "propertyThatWasRenamed")
        if value is None:
            return defaultValue

        if not isinstance(value, bool):
            if defaultValue is None:
                raise TypeError(
                    f"Invalid stored value type: '{type(value).__name__}' should be 'bool'."
                )
            return defaultValue
        return value

    def setPropertyToKeep(self, propertyToKeep: str):
        """
        Sets the propertyToKeep property.

        A property that is unchanged between versions.
        """
        if not isinstance(propertyToKeep, str):
            raise TypeError("propertyToKeep must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "propertyToKeep", propertyToKeep)

    def getPropertyToKeep(self, defaultValue: str = None) -> Union[str, None]:
        """
        Gets the value of the propertyToKeep property or the supplied default.

        A property that is unchanged between versions.
        """
        value = self.__data.getTraitProperty(self.kId, "propertyToKeep")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(
                    f"Invalid stored value type: '{type(value).__name__}' should be 'str'."
                )
            return defaultValue
        return value


class UpdatedTrait_v1:
    """
    An example.
    Usage: entity, locale, relationship
    """

    kId = "openassetio-example:example.Updated"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    def setPropertyToKeep(self, propertyToKeep: str):
        """
        Sets the propertyToKeep property.

        A property that is unchanged between versions.
        """
        if not isinstance(propertyToKeep, str):
            raise TypeError("propertyToKeep must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "propertyToKeep", propertyToKeep)

    def getPropertyToKeep(self, defaultValue: str = None) -> Union[str, None]:
        """
        Gets the value of the propertyToKeep property or the supplied default.

        A property that is unchanged between versions.
        """
        value = self.__data.getTraitProperty(self.kId, "propertyToKeep")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(
                    f"Invalid stored value type: '{type(value).__name__}' should be 'str'."
                )
            return defaultValue
        return value

    def setPropertyToRemove(self, propertyToRemove: bool):
        """
        Sets the propertyToRemove property.

        A defunct property that should be removed in the next version.
        """
        if not isinstance(propertyToRemove, bool):
            raise TypeError("propertyToRemove must be a 'bool'.")
        self.__data.setTraitProperty(self.kId, "propertyToRemove", propertyToRemove)

    def getPropertyToRemove(self, defaultValue: bool = None) -> Union[bool, None]:
        """
        Gets the value of the propertyToRemove property or the supplied default.

        A defunct property that should be removed in the next version.
        """
        value = self.__data.getTraitProperty(self.kId, "propertyToRemove")
        if value is None:
            return defaultValue

        if not isinstance(value, bool):
            if defaultValue is None:
                raise TypeError(
                    f"Invalid stored value type: '{type(value).__name__}' should be 'bool'."
                )
            return defaultValue
        return value

    def setPropertyToRename(self, propertyToRename: bool):
        """
        Sets the propertyToRename property.

        A property that has an inappropriate name and should be renamed
        in the next version.
        """
        if not isinstance(propertyToRename, bool):
            raise TypeError("propertyToRename must be a 'bool'.")
        self.__data.setTraitProperty(self.kId, "propertyToRename", propertyToRename)

    def getPropertyToRename(self, defaultValue: bool = None) -> Union[bool, None]:
        """
        Gets the value of the propertyToRename property or the supplied default.

        A property that has an inappropriate name and should be renamed
        in the next version.
        """
        value = self.__data.getTraitProperty(self.kId, "propertyToRename")
        if value is None:
            return defaultValue

        if not isinstance(value, bool):
            if defaultValue is None:
                raise TypeError(
                    f"Invalid stored value type: '{type(value).__name__}' should be 'bool'."
                )
            return defaultValue
        return value


# Alias to first version
class UpdatedTrait(UpdatedTrait_v1):
    def __init__(self, traitsData):
        super().__init__(traitsData)
        warnings.warn(
            "Use of unversioned trait view classes is deprecated",
            category=DeprecationWarning,
            stacklevel=2,
        )

class AddedTrait_v1:
    """
    An example.
    Usage: entity, locale, relationship
    """

    kId = "openassetio-example:example.Added"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)


# Alias to first version
class AddedTrait(AddedTrait_v1):
    def __init__(self, traitsData):
        super().__init__(traitsData)
        warnings.warn(
            "Use of unversioned trait view classes is deprecated",
            category=DeprecationWarning,
            stacklevel=2,
        )
