# SPDX-License-Identifier: Apache-2.0
# Copyright 2021-2022 The Foundry Visionmongers Ltd

[build-system]
requires = [
    "setuptools>=65.5.0",
    "openassetio-traitgen==1.0.0a10"
]
build-backend = "setuptools.build_meta"

[project]
name = "openassetio-mediacreation"
version = "1.0.0a10"
requires-python = ">=3.10"
dependencies = ["openassetio>=1.0.0b2"]

authors = [
    { name = "Contributors to the OpenAssetIO project", email = "openassetio-discussion@lists.aswf.io" }
]

keywords = ["openassetio", "mediacreation", "trait"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.readme]
text = """\
# OpenAssetIO-MediaCreation

OpenAssetIO extensions for use in Media Creation

> Note: This repository is currently in a pre-alpha state, and so should
> not be used for any production critical applications.

Included are several well-known Traits and Specifications for use in
OpenAssetIO hosts and managers. For more information on this mechanism,
see the [OpenAssetIO docs](https://openassetio.github.io/OpenAssetIO/).
"""
content-type = "text/markdown"

[tool.setuptools]
packages = ["openassetio_mediacreation"]

[project.urls]
OpenAssetIO = "https://github.com/OpenAssetIO/OpenAssetIO"
Source = "https://github.com/OpenAssetIO/OpenAssetIO-MediaCreation"
Issues = "https://github.com/OpenAssetIO/OpenAssetIO-MediaCreation/issues"

[tool.pylint.messages_control]

[tool.pylint.format]
max-line-length = 99

[tool.pylint.basic]
#module-naming-style = "camelCase"
argument-naming-style = "camelCase"
#attr-naming-style = "camelCase"
#function-naming-style = "camelCase"
#method-naming-style = "camelCase"
#const-naming-style = "camelCase"
class-const-naming-style = "camelCase"
variable-naming-style = "camelCase"

# Support both camelCase and PascalCase for modules
module-rgx = "_?([a-z]|[A-Z])+([A-Z][a-z0-9]*)*"
# camelCase doesn't include "__camelCase" or "test_camelCase"
attr-rgx = "_?_?[a-z0-9]+([A-Z][a-z0-9]*)*"
method-rgx = "(_?_|test_)?[a-z0-9]+([A-Z][a-z0-9]*)*"
function-rgx = "(_|test_)?[a-z0-9]+([A-Z][a-z0-9]*)*"
# C++ style constants, e.g. `kThing_SubThing`.
const-rgx = "k([A-Z0-9]+[a-z0-9]*)+_?([A-Z0-9]+[a-z0-9]*)*"
class-const-rgx = "k([A-Z0-9]+[a-z0-9]*)+_?([A-Z0-9]+[a-z0-9]*)*"

[tool.black]
line-length = 99
